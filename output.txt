Architecture du projet :

├─── README.md
├─── TP1
│   └─── 1 - Practical number 1_BALLINI_Thomas.ipynb
└─── TP2_3
    ├─── .env
    ├─── README.md
    ├─── config
    │   ├─── dev
    │   ├─── local
    │   ├─── prd
    │   └─── uat
    ├─── firestore.py
    ├─── requirements.txt
    └─── services
        └─── epf-flower-data-science
            ├─── iac
            │   └─── README.md
            ├─── main.py
            ├─── src
            │   ├─── app.py
            │   ├─── config
            │   │   └─── model_parameters.json
            │   ├─── data
            │   │   ├─── Iris.csv
            │   │   └─── database.sqlite
            │   ├─── schemas
            │   │   ├─── camelcase.py
            │   │   └─── message.py
            │   └─── services
            │       ├─── cleaning.py
            │       ├─── data.py
            │       ├─── parameters.py
            │       └─── utils.py
            └─── tests
                └─── unit


Contenu des fichiers :

fichier README.md: 
# EPF-API-TP

Check the contents of folder "TP1" and TP2 and 3" to have the instructions.

fichier TP1\1 - Practical number 1_BALLINI_Thomas.ipynb: 
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# General Knowledge of API\n",
    "\n",
    "APIs, or Application Programming Interfaces, play a pivotal role in modern software development by facilitating communication and data exchange between different systems. They serve as bridges that allow applications to interact with each other seamlessly, enabling the creation of more robust and interconnected software.\n",
    "\n",
    "APIs come in various forms, each serving specific purposes in the realm of software development. Let's explore some fundamental concepts:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **Question 1:** *Name three types of API protocols. Briefly explain the primary use of each.*\n",
    "\n",
    "  - REST (Representational State Transfer)\n",
    "\n",
    "    Primary Use: REST is an architectural style used for designing networked applications. It uses HTTP requests to perform CRUD (Create, Read, Update, Delete) operations on resources, which are typically represented in formats like JSON or XML. REST is stateless and operates with standard HTTP methods (GET, POST, PUT, DELETE).\n",
    "\n",
    "  - SOAP (Simple Object Access Protocol)\n",
    "\n",
    "    Primary Use: SOAP is a protocol that defines a set of rules for exchanging structured information in the implementation of web services. It relies on XML-based messaging for communication and is highly standardized, making it suitable for enterprise-level applications that require strict security, ACID-compliance, and formal contracts (e.g., WS-Security).\n",
    "\n",
    "  - GraphQL\n",
    "\n",
    "    Primary Use: GraphQL is a query language and runtime for APIs, allowing clients to request only the data they need. It is more flexible than REST, as clients can specify exactly which fields of a resource they want, reducing over-fetching and under-fetching issues.\n",
    "\n",
    "  \n",
    "\n",
    "\n",
    "- **Question 2:** *What are the HTTP response code families? And what do they mean?*\n",
    "\n",
    "  - 1xx (Informational)\n",
    "\n",
    "    Meaning: These codes indicate that the request has been received and the process is continuing. They are rarely used in practice.\n",
    "    Example: 100 (Continue) – The server has received the request header and the client should proceed with sending the body.\n",
    "  - 2xx (Successful)\n",
    "\n",
    "    Meaning: These codes indicate that the request was successfully received, understood, and processed by the server.\n",
    "    Example: 200 (OK) – The request was successful and the server has returned the requested data.\n",
    "  - 3xx (Redirection)\n",
    "\n",
    "    Meaning: These codes indicate that further action is needed by the client to fulfill the request, often involving redirection to another URL.\n",
    "    Example: 301 (Moved Permanently) – The requested resource has been permanently moved to a new URL.\n",
    "  - 4xx (Client Error)\n",
    "\n",
    "    Meaning: These codes indicate that there was an error in the request made by the client (e.g., a bad request or unauthorized access).\n",
    "    Example: 404 (Not Found) – The server could not find the requested resource.\n",
    "  - 5xx (Server Error)\n",
    "\n",
    "    Meaning: These codes indicate that the server failed to fulfill a valid request, typically due to issues on the server side.\n",
    "    Example: 500 (Internal Server Error) – The server encountered an unexpected condition that prevented it from fulfilling the request.\n",
    "\n",
    "  Understanding these families helps developers diagnose and troubleshoot issues during API interactions.\n",
    "\n",
    "- **Question 3:** *What do the HTTP response codes 201, 401, and 404 mean?*\n",
    "\n",
    "  - **201:** Created\n",
    "  - **401:** Unauthorized\n",
    "  - **404:** Not found\n",
    "\n",
    "- **Question 4:** *Name the 4 basic HTTP verbs.*\n",
    "\n",
    "  - GET\n",
    "  - POST\n",
    "  - DELETE\n",
    "  - PATCH\n",
    "\n",
    "- **Question 5:** *Explain the difference between PUT and PATCH?*\n",
    "\n",
    "  - **PUT:** : PUT is used to update or create a resource at a specific URL. When using PUT, the client sends the complete resource representation, and the existing resource is replaced with this new representation. If the resource does not exist, PUT can create it. PUT is typically used when the client wants to update the entire resource.\n",
    "\n",
    "  - **PATCH:** : PATCH is used to apply partial modifications to a resource. Unlike PUT, which requires the entire resource to be sent, PATCH allows the client to send only the fields that need to be updated. It is typically used when only specific parts of a resource need to be updated, making it more efficient for partial updates.\n",
    "\n",
    "- **Question 6:** *Name at least two data formats commonly used in API exchanges.*\n",
    "\n",
    "  - JSON\n",
    "\n",
    "  - XML\n",
    "\n",
    "- **Question 7:** *How can you verify the validity of a resource without getting the entire response?*\n",
    "\n",
    "  - You can verify the validity of a resource without retrieving the entire response by using the HTTP HEAD method.\n",
    "\n",
    "    HEAD is similar to the GET method but it only retrieves the headers of the resource, not the body. This allows you to check if the resource exists, its status code, and other metadata (like content type, content length, etc.) without downloading the entire resource.\n",
    "\n",
    "- **Question 8:** *What are the main concepts of REST? (name them)*\n",
    "\n",
    "  - Statelessness\n",
    "  - Client-Server Architecture\n",
    "  - Cacheability\n",
    "  - Uniform Interface\n",
    "\n",
    "- **Question 9:** *Can you explain one of the main concepts of your choice from among those you mention? (Give an example if possible)*\n",
    "\n",
    "  - Statelessness means that every request from a client to a server must contain all the information the server needs to understand and fulfill the request. The server does not store any session information between requests. This concept simplifies server design because each request is independent, meaning the server does not have to track the state of a user's interactions or maintain a session.\n",
    "\n",
    "In the subsequent sections, we will delve into practical exercises to apply and deepen our understanding of these concepts using SOAP, REST, and GraphQL APIs.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploring SOAP APIs\n",
    "\n",
    "### Few elements to remember about the SOAP Protocol\n",
    "\n",
    "The SOAP protocol, which means Simple Object Access Protocol, is one of the earliest web service protocols. SOAP is an XML-based protocol and was designed to provide a platform/language-independent way to exchange data between different systems over the internet.\n",
    "\n",
    "### Key Concepts in SOAP:\n",
    "\n",
    "- **XML-Based Structure:** SOAP messages are structured using XML, making them both human-readable and machine-readable. This structure allows for the encapsulation of data and its transport between systems.\n",
    "\n",
    "- **Platform and Language Independence:** One of the core objectives of SOAP is to provide a communication method that is independent of the underlying platform or programming language. This promotes interoperability between diverse systems.\n",
    "\n",
    "- **Message Format:** SOAP messages consist of an envelope that defines the message structure and rules for processing, a set of encoding rules for data types, and conventions for representing remote procedure calls.\n",
    "\n",
    "- **Transport Neutrality:** SOAP can be used with various transport protocols, including HTTP, SMTP, and more. This flexibility in transport makes it adaptable to different network environments.\n",
    "\n",
    "### Objective\n",
    "\n",
    "Obtain and display the capital of the Canada corresponding to the ISO code \"CA\" using the following SOAP API. \n",
    "Step by step guide :\n",
    "\n",
    "- **Step 1:** Examine the XML structure of the SOAP request provided. Identify the tag name that contains the ISO country code and the tag that will return the capital name.\n",
    "\n",
    "- **Step 2:** Modify the existing SOAP request to use the ISO code \"CA\" isntead of \"FR\". Ensure that the XML structure remains correct.\n",
    "\n",
    "- **Step 3:** Use the modified request to send a request to the SOAP services at the specified URL.\n",
    "\n",
    "- **Step 4:** Analyze the response received. Extract and display the capital name from the SOAP response.\n",
    "\n",
    "- **Step 5:** Remove sections of code that are not necessary to achieve this objective, in order to simply the script.\n",
    "\n",
    "\n",
    "### Documentation link :\n",
    "\n",
    "- https://www.postman.com/cs-demo/workspace/postman-customer-org-s-public-workspace/documentation/8854915-43f6a9be-0c65-4486-bfdf-36b6548161dd?entity=request-96a53688-6305-45be-ab8b-ca1d1c88f830\n",
    "- https://docs.insomnia.rest/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SOAP Response received successfully:\n",
      "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n",
      "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n",
      "  <soap:Body>\n",
      "    <m:CapitalCityResponse xmlns:m=\"http://www.oorsprong.org/websamples.countryinfo\">\n",
      "      <m:CapitalCityResult>Ottawa</m:CapitalCityResult>\n",
      "    </m:CapitalCityResponse>\n",
      "  </soap:Body>\n",
      "</soap:Envelope>\n",
      "The capital of Canada is: Ottawa\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "\n",
    "url = \"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso\"\n",
    "\n",
    "payload = \"\"\"\n",
    "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n",
    "    <soap:Body>\n",
    "        <CapitalCity xmlns=\"http://www.oorsprong.org/websamples.countryinfo\">\n",
    "            <sCountryISOCode>CA</sCountryISOCode>\n",
    "        </CapitalCity>\n",
    "    </soap:Body>\n",
    "</soap:Envelope>\n",
    "\"\"\"\n",
    "\n",
    "headers = {\n",
    "    'Content-Type': 'text/xml; charset=utf-8',\n",
    "}\n",
    "\n",
    "response = requests.post(url, headers=headers, data=payload)\n",
    "\n",
    "if response.status_code == 200:\n",
    "    print(\"SOAP Response received successfully:\")\n",
    "    response_text = response.text\n",
    "    print(response_text)\n",
    "\n",
    "    import xml.etree.ElementTree as ET\n",
    "    try:\n",
    "        root = ET.fromstring(response.text)\n",
    "        capital = root.find('.//{http://www.oorsprong.org/websamples.countryinfo}CapitalCityResult')\n",
    "        if capital is not None:\n",
    "            print(f\"The capital of Canada is: {capital.text}\")\n",
    "        else:\n",
    "            print(\"Unable to find the capital in the response.\")\n",
    "    except ET.ParseError as e:\n",
    "        print(f\"Error parsing the XML: {e}\")\n",
    "else:\n",
    "    print(f\"Failed to fetch data. HTTP Status Code: {response.status_code}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# REST API Exercise: Star Wars Information Retrieval\n",
    "\n",
    "### Introduction \n",
    "\n",
    "In the exercice, you will explore the Star Wars API (SWAPI) to retrieve and analyze data related to Star Wars characters, films and planets. The SWAPI API is a RESTful web service that provideinformation about Star Wars universe, accessible through various endpoints.\\\n",
    "This exercice is designed to enhance your understanding of working with RESTful APIs, feel free to ask me if you have any question. Each task will build on the previous one so don't hesitate if you are blocked. Make sure to handle bad response code.\n",
    "\n",
    "### Few elements to remember about the REST Protocol\n",
    "\n",
    "REST (Representational State Transfer) is an architectural style for designing networked applications. RESTful APIs (Application Programming Interfaces) conform to the principles of REST, allowing systems to communicate over HTTP in a stateless manner; Some important aspects are:\n",
    "\n",
    "- **Resources:** Everything is a resource, identified by a unique URI.\n",
    "\n",
    "- **HTTP Methods:** CRUD operations are performed using standard HTTP methods (GET, POST, PUT, DELETE).\n",
    "\n",
    "- **Stateless:** Each request from a client contains all the information needed to understand and fulfill the request.\n",
    "\n",
    "### Key Concepts in REST:\n",
    "\n",
    "- **Endpoint:** A specific URI representing a resource. Endpoints are URLs that define where resources can be accessed.\n",
    "\n",
    "- **Basic HTTP Methods:** One of the core objectives of SOAP is to provide a communication method that is independent of the underlying platform or programming language. This promotes interoperability between diverse systems.\n",
    "    - **GET:** Retrieve data from a specified resource.\n",
    "    - **POST:** Submit data to be processed to a specified resource.\n",
    "    - **PUT:** Update a resource.\n",
    "    - **DELETE:** Delete a resource.\n",
    "\n",
    "- **Request and Response:**\n",
    "    - **Request:** The client's message to the server, including the HTTP method, headers, and optional data.\n",
    "    - **Response:** The server's reply to the client's request, containing status information and, optionally, data.\n",
    "\n",
    "\n",
    "### Objective\n",
    "\n",
    "- **Step 1: Introduction:** Find some informations about the SWAPI API : the base URL, the Rate limiting and How to auhtenticate. Find information on all available resources withing this API with a request.\n",
    "\n",
    "### Documentation link :\n",
    "\n",
    "- https://swapi.dev/documentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Available resources: {'people': 'https://swapi.dev/api/people/', 'planets': 'https://swapi.dev/api/planets/', 'films': 'https://swapi.dev/api/films/', 'species': 'https://swapi.dev/api/species/', 'vehicles': 'https://swapi.dev/api/vehicles/', 'starships': 'https://swapi.dev/api/starships/'}\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "\n",
    "base_url = \"https://swapi.dev/api/\"\n",
    "\n",
    "response = requests.get(base_url)\n",
    "if response.status_code == 200:\n",
    "    resources = response.json()\n",
    "    print(\"Available resources:\", resources)\n",
    "else:\n",
    "    print(f\"Error: {response.status_code}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **Step 2: Retrieve Character Information:** Retrieve all characters informations (name, gender, height, ...).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: Luke Skywalker, Gender: male, Height: 172\n",
      "Name: C-3PO, Gender: n/a, Height: 167\n",
      "Name: R2-D2, Gender: n/a, Height: 96\n",
      "Name: Darth Vader, Gender: male, Height: 202\n",
      "Name: Leia Organa, Gender: female, Height: 150\n",
      "Name: Owen Lars, Gender: male, Height: 178\n",
      "Name: Beru Whitesun lars, Gender: female, Height: 165\n",
      "Name: R5-D4, Gender: n/a, Height: 97\n",
      "Name: Biggs Darklighter, Gender: male, Height: 183\n",
      "Name: Obi-Wan Kenobi, Gender: male, Height: 182\n",
      "Name: Anakin Skywalker, Gender: male, Height: 188\n",
      "Name: Wilhuff Tarkin, Gender: male, Height: 180\n",
      "Name: Chewbacca, Gender: male, Height: 228\n",
      "Name: Han Solo, Gender: male, Height: 180\n",
      "Name: Greedo, Gender: male, Height: 173\n",
      "Name: Jabba Desilijic Tiure, Gender: hermaphrodite, Height: 175\n",
      "Name: Wedge Antilles, Gender: male, Height: 170\n",
      "Name: Jek Tono Porkins, Gender: male, Height: 180\n",
      "Name: Yoda, Gender: male, Height: 66\n",
      "Name: Palpatine, Gender: male, Height: 170\n",
      "Name: Boba Fett, Gender: male, Height: 183\n",
      "Name: IG-88, Gender: none, Height: 200\n",
      "Name: Bossk, Gender: male, Height: 190\n",
      "Name: Lando Calrissian, Gender: male, Height: 177\n",
      "Name: Lobot, Gender: male, Height: 175\n",
      "Name: Ackbar, Gender: male, Height: 180\n",
      "Name: Mon Mothma, Gender: female, Height: 150\n",
      "Name: Arvel Crynyd, Gender: male, Height: unknown\n",
      "Name: Wicket Systri Warrick, Gender: male, Height: 88\n",
      "Name: Nien Nunb, Gender: male, Height: 160\n",
      "Name: Qui-Gon Jinn, Gender: male, Height: 193\n",
      "Name: Nute Gunray, Gender: male, Height: 191\n",
      "Name: Finis Valorum, Gender: male, Height: 170\n",
      "Name: Padmé Amidala, Gender: female, Height: 185\n",
      "Name: Jar Jar Binks, Gender: male, Height: 196\n",
      "Name: Roos Tarpals, Gender: male, Height: 224\n",
      "Name: Rugor Nass, Gender: male, Height: 206\n",
      "Name: Ric Olié, Gender: male, Height: 183\n",
      "Name: Watto, Gender: male, Height: 137\n",
      "Name: Sebulba, Gender: male, Height: 112\n",
      "Name: Quarsh Panaka, Gender: male, Height: 183\n",
      "Name: Shmi Skywalker, Gender: female, Height: 163\n",
      "Name: Darth Maul, Gender: male, Height: 175\n",
      "Name: Bib Fortuna, Gender: male, Height: 180\n",
      "Name: Ayla Secura, Gender: female, Height: 178\n",
      "Name: Ratts Tyerel, Gender: male, Height: 79\n",
      "Name: Dud Bolt, Gender: male, Height: 94\n",
      "Name: Gasgano, Gender: male, Height: 122\n",
      "Name: Ben Quadinaros, Gender: male, Height: 163\n",
      "Name: Mace Windu, Gender: male, Height: 188\n",
      "Name: Ki-Adi-Mundi, Gender: male, Height: 198\n",
      "Name: Kit Fisto, Gender: male, Height: 196\n",
      "Name: Eeth Koth, Gender: male, Height: 171\n",
      "Name: Adi Gallia, Gender: female, Height: 184\n",
      "Name: Saesee Tiin, Gender: male, Height: 188\n",
      "Name: Yarael Poof, Gender: male, Height: 264\n",
      "Name: Plo Koon, Gender: male, Height: 188\n",
      "Name: Mas Amedda, Gender: male, Height: 196\n",
      "Name: Gregar Typho, Gender: male, Height: 185\n",
      "Name: Cordé, Gender: female, Height: 157\n",
      "Name: Cliegg Lars, Gender: male, Height: 183\n",
      "Name: Poggle the Lesser, Gender: male, Height: 183\n",
      "Name: Luminara Unduli, Gender: female, Height: 170\n",
      "Name: Barriss Offee, Gender: female, Height: 166\n",
      "Name: Dormé, Gender: female, Height: 165\n",
      "Name: Dooku, Gender: male, Height: 193\n",
      "Name: Bail Prestor Organa, Gender: male, Height: 191\n",
      "Name: Jango Fett, Gender: male, Height: 183\n",
      "Name: Zam Wesell, Gender: female, Height: 168\n",
      "Name: Dexter Jettster, Gender: male, Height: 198\n",
      "Name: Lama Su, Gender: male, Height: 229\n",
      "Name: Taun We, Gender: female, Height: 213\n",
      "Name: Jocasta Nu, Gender: female, Height: 167\n",
      "Name: R4-P17, Gender: female, Height: 96\n",
      "Name: Wat Tambor, Gender: male, Height: 193\n",
      "Name: San Hill, Gender: male, Height: 191\n",
      "Name: Shaak Ti, Gender: female, Height: 178\n",
      "Name: Grievous, Gender: male, Height: 216\n",
      "Name: Tarfful, Gender: male, Height: 234\n",
      "Name: Raymus Antilles, Gender: male, Height: 188\n",
      "Name: Sly Moore, Gender: female, Height: 178\n",
      "Name: Tion Medon, Gender: male, Height: 206\n"
     ]
    }
   ],
   "source": [
    "def fetch_characters():\n",
    "    url = f\"{base_url}people/\"\n",
    "    characters = []\n",
    "    \n",
    "    while url:\n",
    "        response = requests.get(url)\n",
    "        if response.status_code == 200:\n",
    "            data = response.json()\n",
    "            characters.extend(data['results'])\n",
    "            url = data['next']\n",
    "        else:\n",
    "            print(f\"Error: {response.status_code}\")\n",
    "            break\n",
    "    return characters\n",
    "\n",
    "characters = fetch_characters()\n",
    "for char in characters:\n",
    "    print(f\"Name: {char['name']}, Gender: {char['gender']}, Height: {char['height']}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **Step 3: Retrieve Film Information:** Retrieve all films informations (title, director, release date, ...).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Title: A New Hope, Director: George Lucas, Release Date: 1977-05-25\n",
      "Title: The Empire Strikes Back, Director: Irvin Kershner, Release Date: 1980-05-17\n",
      "Title: Return of the Jedi, Director: Richard Marquand, Release Date: 1983-05-25\n",
      "Title: The Phantom Menace, Director: George Lucas, Release Date: 1999-05-19\n",
      "Title: Attack of the Clones, Director: George Lucas, Release Date: 2002-05-16\n",
      "Title: Revenge of the Sith, Director: George Lucas, Release Date: 2005-05-19\n"
     ]
    }
   ],
   "source": [
    "def fetch_films():\n",
    "    url = f\"{base_url}films/\"\n",
    "    response = requests.get(url)\n",
    "    if response.status_code == 200:\n",
    "        films = response.json()['results']\n",
    "        for film in films:\n",
    "            print(f\"Title: {film['title']}, Director: {film['director']}, Release Date: {film['release_date']}\")\n",
    "    else:\n",
    "        print(f\"Error: {response.status_code}\")\n",
    "\n",
    "fetch_films()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **Step 4: Retrieve Planet Information:** Retrieve all planets informations (name, population, climate, ...).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: Tatooine, Population: 200000, Climate: arid\n",
      "Name: Alderaan, Population: 2000000000, Climate: temperate\n",
      "Name: Yavin IV, Population: 1000, Climate: temperate, tropical\n",
      "Name: Hoth, Population: unknown, Climate: frozen\n",
      "Name: Dagobah, Population: unknown, Climate: murky\n",
      "Name: Bespin, Population: 6000000, Climate: temperate\n",
      "Name: Endor, Population: 30000000, Climate: temperate\n",
      "Name: Naboo, Population: 4500000000, Climate: temperate\n",
      "Name: Coruscant, Population: 1000000000000, Climate: temperate\n",
      "Name: Kamino, Population: 1000000000, Climate: temperate\n",
      "Name: Geonosis, Population: 100000000000, Climate: temperate, arid\n",
      "Name: Utapau, Population: 95000000, Climate: temperate, arid, windy\n",
      "Name: Mustafar, Population: 20000, Climate: hot\n",
      "Name: Kashyyyk, Population: 45000000, Climate: tropical\n",
      "Name: Polis Massa, Population: 1000000, Climate: artificial temperate \n",
      "Name: Mygeeto, Population: 19000000, Climate: frigid\n",
      "Name: Felucia, Population: 8500000, Climate: hot, humid\n",
      "Name: Cato Neimoidia, Population: 10000000, Climate: temperate, moist\n",
      "Name: Saleucami, Population: 1400000000, Climate: hot\n",
      "Name: Stewjon, Population: unknown, Climate: temperate\n",
      "Name: Eriadu, Population: 22000000000, Climate: polluted\n",
      "Name: Corellia, Population: 3000000000, Climate: temperate\n",
      "Name: Rodia, Population: 1300000000, Climate: hot\n",
      "Name: Nal Hutta, Population: 7000000000, Climate: temperate\n",
      "Name: Dantooine, Population: 1000, Climate: temperate\n",
      "Name: Bestine IV, Population: 62000000, Climate: temperate\n",
      "Name: Ord Mantell, Population: 4000000000, Climate: temperate\n",
      "Name: unknown, Population: unknown, Climate: unknown\n",
      "Name: Trandosha, Population: 42000000, Climate: arid\n",
      "Name: Socorro, Population: 300000000, Climate: arid\n",
      "Name: Mon Cala, Population: 27000000000, Climate: temperate\n",
      "Name: Chandrila, Population: 1200000000, Climate: temperate\n",
      "Name: Sullust, Population: 18500000000, Climate: superheated\n",
      "Name: Toydaria, Population: 11000000, Climate: temperate\n",
      "Name: Malastare, Population: 2000000000, Climate: arid, temperate, tropical\n",
      "Name: Dathomir, Population: 5200, Climate: temperate\n",
      "Name: Ryloth, Population: 1500000000, Climate: temperate, arid, subartic\n",
      "Name: Aleen Minor, Population: unknown, Climate: unknown\n",
      "Name: Vulpter, Population: 421000000, Climate: temperate, artic\n",
      "Name: Troiken, Population: unknown, Climate: unknown\n",
      "Name: Tund, Population: 0, Climate: unknown\n",
      "Name: Haruun Kal, Population: 705300, Climate: temperate\n",
      "Name: Cerea, Population: 450000000, Climate: temperate\n",
      "Name: Glee Anselm, Population: 500000000, Climate: tropical, temperate\n",
      "Name: Iridonia, Population: unknown, Climate: unknown\n",
      "Name: Tholoth, Population: unknown, Climate: unknown\n",
      "Name: Iktotch, Population: unknown, Climate: arid, rocky, windy\n",
      "Name: Quermia, Population: unknown, Climate: unknown\n",
      "Name: Dorin, Population: unknown, Climate: temperate\n",
      "Name: Champala, Population: 3500000000, Climate: temperate\n",
      "Name: Mirial, Population: unknown, Climate: unknown\n",
      "Name: Serenno, Population: unknown, Climate: unknown\n",
      "Name: Concord Dawn, Population: unknown, Climate: unknown\n",
      "Name: Zolan, Population: unknown, Climate: unknown\n",
      "Name: Ojom, Population: 500000000, Climate: frigid\n",
      "Name: Skako, Population: 500000000000, Climate: temperate\n",
      "Name: Muunilinst, Population: 5000000000, Climate: temperate\n",
      "Name: Shili, Population: unknown, Climate: temperate\n",
      "Name: Kalee, Population: 4000000000, Climate: arid, temperate, tropical\n",
      "Name: Umbara, Population: unknown, Climate: unknown\n"
     ]
    }
   ],
   "source": [
    "def fetch_planets():\n",
    "    url = f\"{base_url}planets/\"\n",
    "    planets = []\n",
    "    \n",
    "    while url:\n",
    "        response = requests.get(url)\n",
    "        if response.status_code == 200:\n",
    "            data = response.json()\n",
    "            planets.extend(data['results'])\n",
    "            url = data['next']  \n",
    "        else:\n",
    "            print(f\"Error: {response.status_code}\")\n",
    "            break\n",
    "    return planets\n",
    "\n",
    "planets = fetch_planets()\n",
    "for planet in planets:\n",
    "    print(f\"Name: {planet['name']}, Population: {planet['population']}, Climate: {planet['climate']}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **Step 5: Search and Display:** Create a function to search for and display information about a specific character based on its name. Be sure to handle cases of bad queries and to make at least three unittests with an understandable name.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: Luke Skywalker, Gender: male, Height: 172\n"
     ]
    }
   ],
   "source": [
    "def search_character(name):\n",
    "    url = f\"{base_url}people/?search={name}\"\n",
    "    response = requests.get(url)\n",
    "    if response.status_code == 200:\n",
    "        data = response.json()\n",
    "        if data['count'] > 0:\n",
    "            for char in data['results']:\n",
    "                print(f\"Name: {char['name']}, Gender: {char['gender']}, Height: {char['height']}\")\n",
    "        else:\n",
    "            print(\"Character not found.\")\n",
    "    else:\n",
    "        print(f\"Error: {response.status_code}\")\n",
    "\n",
    "search_character(\"Luke Skywalker\") \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "....\n",
      "----------------------------------------------------------------------\n",
      "Ran 4 tests in 0.515s\n",
      "\n",
      "OK\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<unittest.runner.TextTestResult run=4 errors=0 failures=0>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import unittest\n",
    "import requests\n",
    "\n",
    "def get_star_wars_info(endpoint):\n",
    "    \"\"\"\n",
    "    Fonction pour récupérer des informations sur Star Wars depuis l'API publique.\n",
    "    \"\"\"\n",
    "    url = f\"https://swapi.dev/api/{endpoint}/\"\n",
    "    response = requests.get(url)\n",
    "    \n",
    "    if response.status_code == 200:\n",
    "        return response.json()\n",
    "    else:\n",
    "        raise Exception(f\"Erreur lors de la récupération des données: {response.status_code}\")\n",
    "\n",
    "\n",
    "class TestStarWarsAPI(unittest.TestCase):\n",
    "\n",
    "    def test_get_star_wars_info_success(self):\n",
    "        \"\"\"\n",
    "        Teste si la fonction retourne les données quand l'API répond avec succès (code 200).\n",
    "        \"\"\"\n",
    "        response = get_star_wars_info('people/1')\n",
    "        \n",
    "        self.assertEqual(response['name'], 'Luke Skywalker')\n",
    "        self.assertEqual(response['height'], '172')\n",
    "        self.assertEqual(response['mass'], '77')\n",
    "    \n",
    "    def test_get_star_wars_info_not_found(self):\n",
    "        \"\"\"\n",
    "        Teste si la fonction gère correctement une erreur 404 (not found).\n",
    "        \"\"\"\n",
    "        with self.assertRaises(Exception) as context:\n",
    "            get_star_wars_info('people/999')\n",
    "        self.assertTrue(\"Erreur lors de la récupération des données\" in str(context.exception))\n",
    "    \n",
    "    def test_get_star_wars_info_invalid_endpoint(self):\n",
    "        \"\"\"\n",
    "        Teste si la fonction gère un mauvais endpoint avec erreur 404.\n",
    "        \"\"\"\n",
    "        with self.assertRaises(Exception) as context:\n",
    "            get_star_wars_info('invalid-endpoint')\n",
    "        self.assertTrue(\"Erreur lors de la récupération des données\" in str(context.exception))\n",
    "\n",
    "    def test_get_star_wars_info_no_data(self):\n",
    "        \"\"\"\n",
    "        Teste si la fonction gère un cas où l'API retourne une réponse vide.\n",
    "        \"\"\"\n",
    "        response = get_star_wars_info('films/1')\n",
    "        self.assertIsInstance(response, dict) \n",
    "\n",
    "\n",
    "suite = unittest.TestLoader().loadTestsFromTestCase(TestStarWarsAPI)\n",
    "unittest.TextTestRunner().run(suite)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **Step 6: Advanced Query:** Store in a pandas dataframe all informations about all the characters of the film you want. Group the characters by species at the end.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             name height mass hair_color   skin_color eye_color birth_year  \\\n",
      "0  Luke Skywalker    172   77      blond         fair      blue      19BBY   \n",
      "1           C-3PO    167   75        n/a         gold    yellow     112BBY   \n",
      "2           R2-D2     96   32        n/a  white, blue       red      33BBY   \n",
      "3     Darth Vader    202  136       none        white    yellow    41.9BBY   \n",
      "4     Leia Organa    150   49      brown        light     brown      19BBY   \n",
      "\n",
      "   gender                         homeworld  \\\n",
      "0    male  https://swapi.dev/api/planets/1/   \n",
      "1     n/a  https://swapi.dev/api/planets/1/   \n",
      "2     n/a  https://swapi.dev/api/planets/8/   \n",
      "3    male  https://swapi.dev/api/planets/1/   \n",
      "4  female  https://swapi.dev/api/planets/2/   \n",
      "\n",
      "                                               films  \\\n",
      "0  [https://swapi.dev/api/films/1/, https://swapi...   \n",
      "1  [https://swapi.dev/api/films/1/, https://swapi...   \n",
      "2  [https://swapi.dev/api/films/1/, https://swapi...   \n",
      "3  [https://swapi.dev/api/films/1/, https://swapi...   \n",
      "4  [https://swapi.dev/api/films/1/, https://swapi...   \n",
      "\n",
      "                              species  \\\n",
      "0                                  []   \n",
      "1  [https://swapi.dev/api/species/2/]   \n",
      "2  [https://swapi.dev/api/species/2/]   \n",
      "3                                  []   \n",
      "4                                  []   \n",
      "\n",
      "                                            vehicles  \\\n",
      "0  [https://swapi.dev/api/vehicles/14/, https://s...   \n",
      "1                                                 []   \n",
      "2                                                 []   \n",
      "3                                                 []   \n",
      "4               [https://swapi.dev/api/vehicles/30/]   \n",
      "\n",
      "                                           starships  \\\n",
      "0  [https://swapi.dev/api/starships/12/, https://...   \n",
      "1                                                 []   \n",
      "2                                                 []   \n",
      "3              [https://swapi.dev/api/starships/13/]   \n",
      "4                                                 []   \n",
      "\n",
      "                       created                       edited  \\\n",
      "0  2014-12-09T13:50:51.644000Z  2014-12-20T21:17:56.891000Z   \n",
      "1  2014-12-10T15:10:51.357000Z  2014-12-20T21:17:50.309000Z   \n",
      "2  2014-12-10T15:11:50.376000Z  2014-12-20T21:17:50.311000Z   \n",
      "3  2014-12-10T15:18:20.704000Z  2014-12-20T21:17:50.313000Z   \n",
      "4  2014-12-10T15:20:09.791000Z  2014-12-20T21:17:50.315000Z   \n",
      "\n",
      "                               url  \n",
      "0  https://swapi.dev/api/people/1/  \n",
      "1  https://swapi.dev/api/people/2/  \n",
      "2  https://swapi.dev/api/people/3/  \n",
      "3  https://swapi.dev/api/people/4/  \n",
      "4  https://swapi.dev/api/people/5/  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "def store_characters_in_dataframe():\n",
    "    characters = fetch_characters()\n",
    "    df = pd.DataFrame(characters)\n",
    "    return df\n",
    "\n",
    "df_characters = store_characters_in_dataframe()\n",
    "print(df_characters.head())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **Step 7: Data Analysis:** Create an advanced query to retrieve information on all the films, and find a way to rank them according to the number of characters in the film.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Films sorted by number of characters:\n",
      "Attack of the Clones - Characters: 40, Director: George Lucas\n",
      "The Phantom Menace - Characters: 34, Director: George Lucas\n",
      "Revenge of the Sith - Characters: 34, Director: George Lucas\n",
      "Return of the Jedi - Characters: 20, Director: Richard Marquand\n",
      "A New Hope - Characters: 18, Director: George Lucas\n",
      "The Empire Strikes Back - Characters: 16, Director: Irvin Kershner\n"
     ]
    }
   ],
   "source": [
    "def analyze_films():\n",
    "    url = f\"{base_url}films/\"\n",
    "    response = requests.get(url)\n",
    "    if response.status_code == 200:\n",
    "        films = response.json()['results']\n",
    "        film_analysis = []\n",
    "\n",
    "        for film in films:\n",
    "            num_characters = len(film['characters'])\n",
    "            film_analysis.append({\n",
    "                \"Title\": film['title'],\n",
    "                \"Director\": film['director'],\n",
    "                \"Release Date\": film['release_date'],\n",
    "                \"Character Count\": num_characters\n",
    "            })\n",
    "\n",
    "        sorted_films = sorted(film_analysis, key=lambda x: x[\"Character Count\"], reverse=True)\n",
    "        print(\"Films sorted by number of characters:\")\n",
    "        for film in sorted_films:\n",
    "            print(f\"{film['Title']} - Characters: {film['Character Count']}, Director: {film['Director']}\")\n",
    "    else:\n",
    "        print(f\"Error: {response.status_code}\")\n",
    "\n",
    "analyze_films()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **Step 8 bonus: Additional Endpoint:** Explore an additional endpoint and make a request to display relevant information. For exemple to retrieve starship or vehicles informations.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starships Information:\n",
      "Name: CR90 corvette, Model: CR90 corvette, Manufacturer: Corellian Engineering Corporation, Crew: 30-165\n",
      "Name: Star Destroyer, Model: Imperial I-class Star Destroyer, Manufacturer: Kuat Drive Yards, Crew: 47,060\n",
      "Name: Sentinel-class landing craft, Model: Sentinel-class landing craft, Manufacturer: Sienar Fleet Systems, Cyngus Spaceworks, Crew: 5\n",
      "Name: Death Star, Model: DS-1 Orbital Battle Station, Manufacturer: Imperial Department of Military Research, Sienar Fleet Systems, Crew: 342,953\n",
      "Name: Millennium Falcon, Model: YT-1300 light freighter, Manufacturer: Corellian Engineering Corporation, Crew: 4\n",
      "Name: Y-wing, Model: BTL Y-wing, Manufacturer: Koensayr Manufacturing, Crew: 2\n",
      "Name: X-wing, Model: T-65 X-wing, Manufacturer: Incom Corporation, Crew: 1\n",
      "Name: TIE Advanced x1, Model: Twin Ion Engine Advanced x1, Manufacturer: Sienar Fleet Systems, Crew: 1\n",
      "Name: Executor, Model: Executor-class star dreadnought, Manufacturer: Kuat Drive Yards, Fondor Shipyards, Crew: 279,144\n",
      "Name: Rebel transport, Model: GR-75 medium transport, Manufacturer: Gallofree Yards, Inc., Crew: 6\n",
      "Name: Slave 1, Model: Firespray-31-class patrol and attack, Manufacturer: Kuat Systems Engineering, Crew: 1\n",
      "Name: Imperial shuttle, Model: Lambda-class T-4a shuttle, Manufacturer: Sienar Fleet Systems, Crew: 6\n",
      "Name: EF76 Nebulon-B escort frigate, Model: EF76 Nebulon-B escort frigate, Manufacturer: Kuat Drive Yards, Crew: 854\n",
      "Name: Calamari Cruiser, Model: MC80 Liberty type Star Cruiser, Manufacturer: Mon Calamari shipyards, Crew: 5400\n",
      "Name: A-wing, Model: RZ-1 A-wing Interceptor, Manufacturer: Alliance Underground Engineering, Incom Corporation, Crew: 1\n",
      "Name: B-wing, Model: A/SF-01 B-wing starfighter, Manufacturer: Slayn & Korpil, Crew: 1\n",
      "Name: Republic Cruiser, Model: Consular-class cruiser, Manufacturer: Corellian Engineering Corporation, Crew: 9\n",
      "Name: Droid control ship, Model: Lucrehulk-class Droid Control Ship, Manufacturer: Hoersch-Kessel Drive, Inc., Crew: 175\n",
      "Name: Naboo fighter, Model: N-1 starfighter, Manufacturer: Theed Palace Space Vessel Engineering Corps, Crew: 1\n",
      "Name: Naboo Royal Starship, Model: J-type 327 Nubian royal starship, Manufacturer: Theed Palace Space Vessel Engineering Corps, Nubia Star Drives, Crew: 8\n",
      "Name: Scimitar, Model: Star Courier, Manufacturer: Republic Sienar Systems, Crew: 1\n",
      "Name: J-type diplomatic barge, Model: J-type diplomatic barge, Manufacturer: Theed Palace Space Vessel Engineering Corps, Nubia Star Drives, Crew: 5\n",
      "Name: AA-9 Coruscant freighter, Model: Botajef AA-9 Freighter-Liner, Manufacturer: Botajef Shipyards, Crew: unknown\n",
      "Name: Jedi starfighter, Model: Delta-7 Aethersprite-class interceptor, Manufacturer: Kuat Systems Engineering, Crew: 1\n",
      "Name: H-type Nubian yacht, Model: H-type Nubian yacht, Manufacturer: Theed Palace Space Vessel Engineering Corps, Crew: 4\n",
      "Name: Republic Assault ship, Model: Acclamator I-class assault ship, Manufacturer: Rothana Heavy Engineering, Crew: 700\n",
      "Name: Solar Sailer, Model: Punworcca 116-class interstellar sloop, Manufacturer: Huppla Pasa Tisc Shipwrights Collective, Crew: 3\n",
      "Name: Trade Federation cruiser, Model: Providence-class carrier/destroyer, Manufacturer: Rendili StarDrive, Free Dac Volunteers Engineering corps., Crew: 600\n",
      "Name: Theta-class T-2c shuttle, Model: Theta-class T-2c shuttle, Manufacturer: Cygnus Spaceworks, Crew: 5\n",
      "Name: Republic attack cruiser, Model: Senator-class Star Destroyer, Manufacturer: Kuat Drive Yards, Allanteen Six shipyards, Crew: 7400\n",
      "Name: Naboo star skiff, Model: J-type star skiff, Manufacturer: Theed Palace Space Vessel Engineering Corps/Nubia Star Drives, Incorporated, Crew: 3\n",
      "Name: Jedi Interceptor, Model: Eta-2 Actis-class light interceptor, Manufacturer: Kuat Systems Engineering, Crew: 1\n",
      "Name: arc-170, Model: Aggressive Reconnaissance-170 starfighte, Manufacturer: Incom Corporation, Subpro Corporation, Crew: 3\n",
      "Name: Banking clan frigte, Model: Munificent-class star frigate, Manufacturer: Hoersch-Kessel Drive, Inc, Gwori Revolutionary Industries, Crew: 200\n",
      "Name: Belbullab-22 starfighter, Model: Belbullab-22 starfighter, Manufacturer: Feethan Ottraw Scalable Assemblies, Crew: 1\n",
      "Name: V-wing, Model: Alpha-3 Nimbus-class V-wing starfighter, Manufacturer: Kuat Systems Engineering, Crew: 1\n"
     ]
    }
   ],
   "source": [
    "def fetch_starships():\n",
    "    url = f\"{base_url}starships/\"\n",
    "    starships = []\n",
    "\n",
    "    while url:\n",
    "        response = requests.get(url)\n",
    "        if response.status_code == 200:\n",
    "            data = response.json()\n",
    "            starships.extend(data['results'])\n",
    "            url = data['next']  \n",
    "        else:\n",
    "            print(f\"Error: {response.status_code}\")\n",
    "            break\n",
    "\n",
    "    return starships\n",
    "\n",
    "def display_starship_info():\n",
    "    starships = fetch_starships()\n",
    "    print(\"Starships Information:\")\n",
    "    for ship in starships:\n",
    "        print(f\"Name: {ship['name']}, Model: {ship['model']}, Manufacturer: {ship['manufacturer']}, Crew: {ship['crew']}\")\n",
    "\n",
    "display_starship_info()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Postman a powerfull tool for"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploring GraphQL APIs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Usefull links:\n",
    "- https://graphql.org/learn/queries/\n",
    "- https://graphql-demo.mead.io/\n",
    "\n",
    "Use this graphQL API to make complex requests on Star Wars world:\n",
    "- https://swapi-graphql.netlify.app/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On the below cell you have a simple graphQL query."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploring Star Wars Data with GraphQL\n",
    "\n",
    "### Introduction \n",
    "\n",
    "In this exercice you will retrieve the previous results in another way, by consuming the GraphQL API of SWAPI.\n",
    "\n",
    "### Few elements to remember about the GraphQL Protocol\n",
    "\n",
    "GraphQL is a powerful query language for APIs that provides a more efficient and flexible alternative to traditional REST APIs. In this exercise, we will interact with the Star Wars API (SWAPI) using GraphQL to retrieve specific information about characters, films, and species from the Star Wars universe. Some important aspects are:\n",
    "\n",
    "- **Single Endpoint:** GraphQL APIs typically have a single endpoint for all queries, making it more straightforward to manage and interact with.\n",
    "\n",
    "- **Flexible Responses:** Clients receive exactly the data they request, reducing over-fetching of data common in traditional REST APIs.\n",
    "\n",
    "- **Introspection:** GraphQL supports introspection, allowing clients to query the schema itself, making it self-documenting and aiding in development.\n",
    "\n",
    "### Key Concepts in GraphQL:\n",
    "\n",
    "- **GraphQL Schema:** GraphQL APIs have a schema that defines the types of data available and the relationships between them.\n",
    "\n",
    "- **Queries:** In GraphQL, clients specify the exact data they need using queries, allowing for more efficient data retrieval.\n",
    "\n",
    "- **Fields and Nested Structures:** Queries can include specific fields, and GraphQL supports nested structures to retrieve related data in a single request.\n",
    "\n",
    "\n",
    "### Objective\n",
    "\n",
    "- **Step 1: Introduction:** Understand the REST API Query. You can use the playground for this : https://swapi-graphql.netlify.app/?query=%7B%0A%20%20allFilms%20%7B%0A%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20id%2C%0A%20%20%20%20%20%20%20%20title%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D\n",
    "\n",
    "- **Step 2: Retrieve Films with Character Information:** Retrieve Films with Character Information in a single query.\n",
    "\n",
    "\n",
    "### Documentation link :\n",
    "\n",
    "- https://swapi.dev/documentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Film Title: A New Hope\n",
      "Film Title: The Empire Strikes Back\n",
      "Film Title: Return of the Jedi\n",
      "Film Title: The Phantom Menace\n",
      "Film Title: Attack of the Clones\n",
      "Film Title: Revenge of the Sith\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "\n",
    "url = \"https://swapi-graphql.netlify.app/.netlify/functions/index\"\n",
    "\n",
    "query = \"\"\"\n",
    "query {\n",
    "  allFilms {\n",
    "    edges {\n",
    "      node {\n",
    "        title\n",
    "      }\n",
    "    }\n",
    "  }\n",
    "}\n",
    "\"\"\"\n",
    "\n",
    "response = requests.post(url, json={\"query\": query})\n",
    "\n",
    "if response.status_code == 200:\n",
    "    data = response.json()\n",
    "    films = data['data']['allFilms']['edges']\n",
    "    for film in films:\n",
    "        print(f\"Film Title: {film['node']['title']}\")\n",
    "else:\n",
    "    print(f\"Error: {response.status_code}, {response.text}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Film Title: A New Hope\n",
      "Characters:\n",
      "  - Luke Skywalker\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Darth Vader\n",
      "  - Leia Organa\n",
      "  - Owen Lars\n",
      "  - Beru Whitesun lars\n",
      "  - R5-D4\n",
      "  - Biggs Darklighter\n",
      "  - Obi-Wan Kenobi\n",
      "  - Wilhuff Tarkin\n",
      "  - Chewbacca\n",
      "  - Han Solo\n",
      "  - Greedo\n",
      "  - Jabba Desilijic Tiure\n",
      "  - Wedge Antilles\n",
      "  - Jek Tono Porkins\n",
      "  - Raymus Antilles\n",
      "\n",
      "Film Title: The Empire Strikes Back\n",
      "Characters:\n",
      "  - Luke Skywalker\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Darth Vader\n",
      "  - Leia Organa\n",
      "  - Obi-Wan Kenobi\n",
      "  - Chewbacca\n",
      "  - Han Solo\n",
      "  - Wedge Antilles\n",
      "  - Yoda\n",
      "  - Palpatine\n",
      "  - Boba Fett\n",
      "  - IG-88\n",
      "  - Bossk\n",
      "  - Lando Calrissian\n",
      "  - Lobot\n",
      "\n",
      "Film Title: Return of the Jedi\n",
      "Characters:\n",
      "  - Luke Skywalker\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Darth Vader\n",
      "  - Leia Organa\n",
      "  - Obi-Wan Kenobi\n",
      "  - Chewbacca\n",
      "  - Han Solo\n",
      "  - Jabba Desilijic Tiure\n",
      "  - Wedge Antilles\n",
      "  - Yoda\n",
      "  - Palpatine\n",
      "  - Boba Fett\n",
      "  - Lando Calrissian\n",
      "  - Ackbar\n",
      "  - Mon Mothma\n",
      "  - Arvel Crynyd\n",
      "  - Wicket Systri Warrick\n",
      "  - Nien Nunb\n",
      "  - Bib Fortuna\n",
      "\n",
      "Film Title: The Phantom Menace\n",
      "Characters:\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Obi-Wan Kenobi\n",
      "  - Anakin Skywalker\n",
      "  - Jabba Desilijic Tiure\n",
      "  - Yoda\n",
      "  - Palpatine\n",
      "  - Qui-Gon Jinn\n",
      "  - Nute Gunray\n",
      "  - Finis Valorum\n",
      "  - Padmé Amidala\n",
      "  - Jar Jar Binks\n",
      "  - Roos Tarpals\n",
      "  - Rugor Nass\n",
      "  - Ric Olié\n",
      "  - Watto\n",
      "  - Sebulba\n",
      "  - Quarsh Panaka\n",
      "  - Shmi Skywalker\n",
      "  - Darth Maul\n",
      "  - Ayla Secura\n",
      "  - Ratts Tyerel\n",
      "  - Dud Bolt\n",
      "  - Gasgano\n",
      "  - Ben Quadinaros\n",
      "  - Mace Windu\n",
      "  - Ki-Adi-Mundi\n",
      "  - Kit Fisto\n",
      "  - Eeth Koth\n",
      "  - Adi Gallia\n",
      "  - Saesee Tiin\n",
      "  - Yarael Poof\n",
      "  - Plo Koon\n",
      "  - Mas Amedda\n",
      "\n",
      "Film Title: Attack of the Clones\n",
      "Characters:\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Owen Lars\n",
      "  - Beru Whitesun lars\n",
      "  - Obi-Wan Kenobi\n",
      "  - Anakin Skywalker\n",
      "  - Yoda\n",
      "  - Palpatine\n",
      "  - Boba Fett\n",
      "  - Nute Gunray\n",
      "  - Padmé Amidala\n",
      "  - Jar Jar Binks\n",
      "  - Watto\n",
      "  - Shmi Skywalker\n",
      "  - Ayla Secura\n",
      "  - Mace Windu\n",
      "  - Ki-Adi-Mundi\n",
      "  - Kit Fisto\n",
      "  - Plo Koon\n",
      "  - Mas Amedda\n",
      "  - Gregar Typho\n",
      "  - Cordé\n",
      "  - Cliegg Lars\n",
      "  - Poggle the Lesser\n",
      "  - Luminara Unduli\n",
      "  - Barriss Offee\n",
      "  - Dormé\n",
      "  - Dooku\n",
      "  - Bail Prestor Organa\n",
      "  - Jango Fett\n",
      "  - Zam Wesell\n",
      "  - Dexter Jettster\n",
      "  - Lama Su\n",
      "  - Taun We\n",
      "  - Jocasta Nu\n",
      "  - R4-P17\n",
      "  - Wat Tambor\n",
      "  - San Hill\n",
      "  - Shaak Ti\n",
      "  - Sly Moore\n",
      "\n",
      "Film Title: Revenge of the Sith\n",
      "Characters:\n",
      "  - Luke Skywalker\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Darth Vader\n",
      "  - Leia Organa\n",
      "  - Owen Lars\n",
      "  - Beru Whitesun lars\n",
      "  - Obi-Wan Kenobi\n",
      "  - Anakin Skywalker\n",
      "  - Wilhuff Tarkin\n",
      "  - Chewbacca\n",
      "  - Yoda\n",
      "  - Palpatine\n",
      "  - Nute Gunray\n",
      "  - Padmé Amidala\n",
      "  - Ayla Secura\n",
      "  - Mace Windu\n",
      "  - Ki-Adi-Mundi\n",
      "  - Kit Fisto\n",
      "  - Eeth Koth\n",
      "  - Adi Gallia\n",
      "  - Saesee Tiin\n",
      "  - Plo Koon\n",
      "  - Poggle the Lesser\n",
      "  - Luminara Unduli\n",
      "  - Dooku\n",
      "  - Bail Prestor Organa\n",
      "  - R4-P17\n",
      "  - Shaak Ti\n",
      "  - Grievous\n",
      "  - Tarfful\n",
      "  - Raymus Antilles\n",
      "  - Sly Moore\n",
      "  - Tion Medon\n"
     ]
    }
   ],
   "source": [
    "query = \"\"\"\n",
    "query {\n",
    "  allFilms {\n",
    "    edges {\n",
    "      node {\n",
    "        title\n",
    "        characterConnection {\n",
    "          edges {\n",
    "            node {\n",
    "              name\n",
    "            }\n",
    "          }\n",
    "        }\n",
    "      }\n",
    "    }\n",
    "  }\n",
    "}\n",
    "\"\"\"\n",
    "\n",
    "response = requests.post(url, json={\"query\": query})\n",
    "\n",
    "if response.status_code == 200:\n",
    "    data = response.json()\n",
    "    films = data['data']['allFilms']['edges']\n",
    "    for film in films:\n",
    "        print(f\"\\nFilm Title: {film['node']['title']}\")\n",
    "        characters = film['node']['characterConnection']['edges']\n",
    "        print(\"Characters:\")\n",
    "        for char in characters:\n",
    "            print(f\"  - {char['node']['name']}\")\n",
    "else:\n",
    "    print(f\"Error: {response.status_code}, {response.text}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Film Title: A New Hope\n",
      "Characters:\n",
      "  - Luke Skywalker\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Darth Vader\n",
      "  - Leia Organa\n",
      "  - Owen Lars\n",
      "  - Beru Whitesun lars\n",
      "  - R5-D4\n",
      "  - Biggs Darklighter\n",
      "  - Obi-Wan Kenobi\n",
      "  - Wilhuff Tarkin\n",
      "  - Chewbacca\n",
      "  - Han Solo\n",
      "  - Greedo\n",
      "  - Jabba Desilijic Tiure\n",
      "  - Wedge Antilles\n",
      "  - Jek Tono Porkins\n",
      "  - Raymus Antilles\n",
      "\n",
      "Film Title: The Empire Strikes Back\n",
      "Characters:\n",
      "  - Luke Skywalker\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Darth Vader\n",
      "  - Leia Organa\n",
      "  - Obi-Wan Kenobi\n",
      "  - Chewbacca\n",
      "  - Han Solo\n",
      "  - Wedge Antilles\n",
      "  - Yoda\n",
      "  - Palpatine\n",
      "  - Boba Fett\n",
      "  - IG-88\n",
      "  - Bossk\n",
      "  - Lando Calrissian\n",
      "  - Lobot\n",
      "\n",
      "Film Title: Return of the Jedi\n",
      "Characters:\n",
      "  - Luke Skywalker\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Darth Vader\n",
      "  - Leia Organa\n",
      "  - Obi-Wan Kenobi\n",
      "  - Chewbacca\n",
      "  - Han Solo\n",
      "  - Jabba Desilijic Tiure\n",
      "  - Wedge Antilles\n",
      "  - Yoda\n",
      "  - Palpatine\n",
      "  - Boba Fett\n",
      "  - Lando Calrissian\n",
      "  - Ackbar\n",
      "  - Mon Mothma\n",
      "  - Arvel Crynyd\n",
      "  - Wicket Systri Warrick\n",
      "  - Nien Nunb\n",
      "  - Bib Fortuna\n",
      "\n",
      "Film Title: The Phantom Menace\n",
      "Characters:\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Obi-Wan Kenobi\n",
      "  - Anakin Skywalker\n",
      "  - Jabba Desilijic Tiure\n",
      "  - Yoda\n",
      "  - Palpatine\n",
      "  - Qui-Gon Jinn\n",
      "  - Nute Gunray\n",
      "  - Finis Valorum\n",
      "  - Padmé Amidala\n",
      "  - Jar Jar Binks\n",
      "  - Roos Tarpals\n",
      "  - Rugor Nass\n",
      "  - Ric Olié\n",
      "  - Watto\n",
      "  - Sebulba\n",
      "  - Quarsh Panaka\n",
      "  - Shmi Skywalker\n",
      "  - Darth Maul\n",
      "  - Ayla Secura\n",
      "  - Ratts Tyerel\n",
      "  - Dud Bolt\n",
      "  - Gasgano\n",
      "  - Ben Quadinaros\n",
      "  - Mace Windu\n",
      "  - Ki-Adi-Mundi\n",
      "  - Kit Fisto\n",
      "  - Eeth Koth\n",
      "  - Adi Gallia\n",
      "  - Saesee Tiin\n",
      "  - Yarael Poof\n",
      "  - Plo Koon\n",
      "  - Mas Amedda\n",
      "\n",
      "Film Title: Attack of the Clones\n",
      "Characters:\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Owen Lars\n",
      "  - Beru Whitesun lars\n",
      "  - Obi-Wan Kenobi\n",
      "  - Anakin Skywalker\n",
      "  - Yoda\n",
      "  - Palpatine\n",
      "  - Boba Fett\n",
      "  - Nute Gunray\n",
      "  - Padmé Amidala\n",
      "  - Jar Jar Binks\n",
      "  - Watto\n",
      "  - Shmi Skywalker\n",
      "  - Ayla Secura\n",
      "  - Mace Windu\n",
      "  - Ki-Adi-Mundi\n",
      "  - Kit Fisto\n",
      "  - Plo Koon\n",
      "  - Mas Amedda\n",
      "  - Gregar Typho\n",
      "  - Cordé\n",
      "  - Cliegg Lars\n",
      "  - Poggle the Lesser\n",
      "  - Luminara Unduli\n",
      "  - Barriss Offee\n",
      "  - Dormé\n",
      "  - Dooku\n",
      "  - Bail Prestor Organa\n",
      "  - Jango Fett\n",
      "  - Zam Wesell\n",
      "  - Dexter Jettster\n",
      "  - Lama Su\n",
      "  - Taun We\n",
      "  - Jocasta Nu\n",
      "  - R4-P17\n",
      "  - Wat Tambor\n",
      "  - San Hill\n",
      "  - Shaak Ti\n",
      "  - Sly Moore\n",
      "\n",
      "Film Title: Revenge of the Sith\n",
      "Characters:\n",
      "  - Luke Skywalker\n",
      "  - C-3PO\n",
      "  - R2-D2\n",
      "  - Darth Vader\n",
      "  - Leia Organa\n",
      "  - Owen Lars\n",
      "  - Beru Whitesun lars\n",
      "  - Obi-Wan Kenobi\n",
      "  - Anakin Skywalker\n",
      "  - Wilhuff Tarkin\n",
      "  - Chewbacca\n",
      "  - Yoda\n",
      "  - Palpatine\n",
      "  - Nute Gunray\n",
      "  - Padmé Amidala\n",
      "  - Ayla Secura\n",
      "  - Mace Windu\n",
      "  - Ki-Adi-Mundi\n",
      "  - Kit Fisto\n",
      "  - Eeth Koth\n",
      "  - Adi Gallia\n",
      "  - Saesee Tiin\n",
      "  - Plo Koon\n",
      "  - Poggle the Lesser\n",
      "  - Luminara Unduli\n",
      "  - Dooku\n",
      "  - Bail Prestor Organa\n",
      "  - R4-P17\n",
      "  - Shaak Ti\n",
      "  - Grievous\n",
      "  - Tarfful\n",
      "  - Raymus Antilles\n",
      "  - Sly Moore\n",
      "  - Tion Medon\n"
     ]
    }
   ],
   "source": [
    "films_data = []\n",
    "\n",
    "if response.status_code == 200:\n",
    "    data = response.json()\n",
    "    films = data['data']['allFilms']['edges']\n",
    "    for film in films:\n",
    "        film_title = film['node']['title']\n",
    "        characters = [char['node']['name'] for char in film['node']['characterConnection']['edges']]\n",
    "        films_data.append({\"title\": film_title, \"characters\": characters})\n",
    "else:\n",
    "    print(f\"Error: {response.status_code}, {response.text}\")\n",
    "\n",
    "for film in films_data:\n",
    "    print(f\"\\nFilm Title: {film['title']}\")\n",
    "    print(\"Characters:\")\n",
    "    for char in film['characters']:\n",
    "        print(f\"  - {char}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Film Title: A New Hope\n",
      "Planets:\n",
      "  - Tatooine\n",
      "  - Alderaan\n",
      "  - Yavin IV\n",
      "\n",
      "Film Title: The Empire Strikes Back\n",
      "Planets:\n",
      "  - Hoth\n",
      "  - Dagobah\n",
      "  - Bespin\n",
      "  - Ord Mantell\n",
      "\n",
      "Film Title: Return of the Jedi\n",
      "Planets:\n",
      "  - Tatooine\n",
      "  - Dagobah\n",
      "  - Endor\n",
      "  - Naboo\n",
      "  - Coruscant\n",
      "\n",
      "Film Title: The Phantom Menace\n",
      "Planets:\n",
      "  - Tatooine\n",
      "  - Naboo\n",
      "  - Coruscant\n",
      "\n",
      "Film Title: Attack of the Clones\n",
      "Planets:\n",
      "  - Tatooine\n",
      "  - Naboo\n",
      "  - Coruscant\n",
      "  - Kamino\n",
      "  - Geonosis\n",
      "\n",
      "Film Title: Revenge of the Sith\n",
      "Planets:\n",
      "  - Tatooine\n",
      "  - Alderaan\n",
      "  - Dagobah\n",
      "  - Naboo\n",
      "  - Coruscant\n",
      "  - Utapau\n",
      "  - Mustafar\n",
      "  - Kashyyyk\n",
      "  - Polis Massa\n",
      "  - Mygeeto\n",
      "  - Felucia\n",
      "  - Cato Neimoidia\n",
      "  - Saleucami\n"
     ]
    }
   ],
   "source": [
    "query = \"\"\"\n",
    "query {\n",
    "  allFilms {\n",
    "    edges {\n",
    "      node {\n",
    "        title\n",
    "        planetConnection {\n",
    "          edges {\n",
    "            node {\n",
    "              name\n",
    "            }\n",
    "          }\n",
    "        }\n",
    "      }\n",
    "    }\n",
    "  }\n",
    "}\n",
    "\"\"\"\n",
    "\n",
    "response = requests.post(url, json={\"query\": query})\n",
    "\n",
    "if response.status_code == 200:\n",
    "    data = response.json()\n",
    "    films = data['data']['allFilms']['edges']\n",
    "    for film in films:\n",
    "        print(f\"\\nFilm Title: {film['node']['title']}\")\n",
    "        planets = film['node']['planetConnection']['edges']\n",
    "        print(\"Planets:\")\n",
    "        for planet in planets:\n",
    "            print(f\"  - {planet['node']['name']}\")\n",
    "else:\n",
    "    print(f\"Error: {response.status_code}, {response.text}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---------------------------"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


fichier TP2_3\.env: 
# Utilisateur et clé API sécurisés
KAGGLE_USERNAME=thomasballini
KAGGLE_API_KEY=69a86b42b022c682c4b1751f4b2ba5ea


fichier TP2_3\firestore.py: 
import google.auth
from google.cloud import firestore


class FirestoreClient:
    """Wrapper around a database"""

    client: firestore.Client

    def __init__(self) -> None:
        """Init the client."""
        credentials, _ = google.auth.default()

        self.client = firestore.Client(credentials=credentials)

    def get(self, collection_name: str, document_id: str) -> dict:
        """Find one document by ID.
        Args:
            collection_name: The collection name
            document_id: The document id
        Return:
            Document value.
        """
        doc = self.client.collection(
            collection_name).document(document_id).get()
        if doc.exists:
            return doc.to_dict()
        raise FileExistsError(
            f"No document found at {collection_name} with the id {document_id}"
        )


fichier TP2_3\README.md: 
# EPF-API-TP

- **Question 1:** _Which Python library/framework is often used to create fast, simple REST APIs?_

  - Django

  - **Flask**

  - FastAPI

  - All of the above

- **Question 2:** _What's the main difference between Django, Flask and FastAPI in terms of performance and speed?_

  - Django is generally faster than Flask and FastAPI.

  - Flask outperforms Django and FastAPI.

  - **FastAPI is renowned for its increased speed and performance compared with Django and Flask.**

  - Django, Flask and FastAPI have equivalent performance.

- **Question 3:** What is an endpoint in the context of REST APIs?\*

  - A unique IP address associated with an API.

  - A breakpoint in the code where the API can be interrupted.

  - **A specific URL to which a request can be sent to interact with the API.**

  - A unique identifier assigned to each incoming request.

- **Question 4:** _What are the main HTTP verbs used to define REST API methods?_

  - **GET, POST, PUT, PATCH, DELETE**

  - SEND, RECEIVE, UPDATE, REMOVE

  - READ, WRITE, MODIFY, DELETE

  - FETCH, INSERT, UPDATE, DELETE

- **Question 5:** _In the context of REST APIs, what does the term "middleware" mean?_

  - A component that processes data sent by the user.

  - An external library used to speed up API development.

  - **Intermediate software that processes the request before it reaches the main application.**

  - A method for securing data stored in the database.

- **Question 6:** _Which Python library is often used to serialize and deserialize JSON data in the context of REST APIs?_

  - JSONify

  - PyJSON

  - **json.dumps() and json.loads()**

  - serializeJSON

- **Question 7:** _What is the main use of the HTTP "PUT" method in the context of REST APIs?_

  - Create a new resource.

  - **Update an existing resource, or create one if it doesn't exist.**

  - Delete a resource.

  - Read a specific resource.

- **Question 8:** In FastAPI, how do you define an endpoint to handle a POST request with JSON data?\*

  - **@app.post("/endpoint")**

  - @app.get("/endpoint")

  - @app.request("/endpoint")

  - @app.update("/endpoint")

# Creating an API with FastAPI

### Introduction

In this exercise you are going to encapsulate data processing and machine learning model execution logic to make predictions on a well-known dataset: iris kaggle dataset

### Few elements to remember about the REST Protocol

REST (Representational State Transfer) is an architectural style for designing networked applications. RESTful APIs (Application Programming Interfaces) conform to the principles of REST, allowing systems to communicate over HTTP in a stateless manner; Some important aspects are:

- **Resources:** Everything is a resource, identified by a unique URI.

- **HTTP Methods:** CRUD operations are performed using standard HTTP methods (GET, POST, PUT, DELETE).

- **Stateless:** Each request from a client contains all the information needed to understand and fulfill the request.

### Key Concepts in FastAPI:

- **Endpoint:**

- **Basic HTTP Methods:**

- **Request and Response:**

### Evaluation requirements

The evaluation criteria will be as follows:

- Proper functioning of endpoints
- Clear documentation of code, use of explicit names and compliance with REST naming conventions. Please follow pep-8 convention for documenting your functions (exemple at the end of the README)
- Static swagger generation through an API route
- Completion of unit tests

### Objective

Before starting the exercise, fork the following git repo if not already done in TP1: https://github.com/klem-data/API---Webscrapping \
Don't forget to add me to the repo with the following email address: clement.letizia1@epfedu.fr

About the API workflow:
- The router.py file contains references to the routers defined in the routers folder.
- The routers file contains the declaration of all API routes by tags 
- The Services folder must contain the functions that are called in the route declaration

- **Step 1: Installing libraries:** Install the libraries in the requirements.txt

- **Step 2: First launch:**  Execute the main.py file in the root folder and access it.

- **Step 3: Redirect root API:**  Redirect the root endpoint of your API to the automatic swagger documentation

- **Step 4: Access the swagger documentation:**  Access to the swagger built automatically by FastAPI

- **Step 5: First call to the API:**  Make an API request on the hello route using the swagger directly or a tool like insomnia or postman

- **Step 6: Access the dataset:**  Create a route in api/routes/data to download and save the contents of the following kaggle dataset in the src/data folder: https://www.kaggle.com/datasets/uciml/iris. If you're having too many problems, simply download the dataset from the kaggle website. documentation : https://www.geeksforgeeks.org/how-to-download-kaggle-datasets-into-jupyter-notebook/

- **Step 7: Loading the Iris Flower dataset:** Add an endpoint to load the iris dataset file as a dataframe and return it as a json.

- **Step 8: Processing the dataset:** Add an endpoint to be able to perform the necessary processing on the data before being able to train a model with it.

- **Step 9: Split in train and test:** Add an endpoint to split the iris dataset as train and test and send back a json with both

- **Step 10: Parameters init:** Go to scikit learn and select any classification model to be used on the iris dataset (performance is of no interest to us in this course). Look at the parameters you need to use for this model and store them in the file src/config/model_parameters.json

- **Step 11: Training the classification model:** Add an endpoint to train a classification model with the processed dataset as input and saved this model in the folder src/models.

- **Step 12: Prediction with Trained Model:** Add endpoint to make predictions with trained model and parameters. This endpoint have to send back the predictions as json.

- **Step 13: Create the Firestore collection:** Create the firestore collection "parameters" with the following parameters: "n_estimators", "criterion". The name of the document with the parameters have to be : parameters.

- **Step 14: Retrieve parameters from Firestore:** Add an endpoint to retrieve parameters from Firestore.

- **Step 15: Update and add Firestore parameters:** Add endpoints to update or add parameters in Firestore.

- **Step 16: Authentication:** Implement authentication through Firestore authentication

- **Step 17: User management:** Extend authentication to include user registration, login and logout endpoints. Explore also user roles and permissions. Allow only admin users to access to the list of user 

- **Step 18: Protection against Denial of Service (DoS) attacks:** Implement rate limiting by user

- **Step 19: API versioning:** Add the information about the version of your API. (you are on version 1.0) Also add the prefix to your routes to indicate the version.

- **Step 20: Error Handling:** Add a custom error responses for error 404 and provide meaningful error message.

- **Step 21: API testing:** Implement unit tests for your functions and enpoints

- **Step 22: CI/CD pipeline:** Define a CI/CD pipeline on github using github Actions to launch your tests after every push

The completion of this TP is relatively long and may overtake TP3 

### Documentation link :

- FastApi: https://fastapi.tiangolo.com/

- Google Cloud Firestore: https://cloud.google.com/python/docs/reference/firestore/latest/index.html

- Scikit-Learn: https://scikit-learn.org/stable/index.html

- Pandas: https://pandas.pydata.org/docs/


### Pep-8 docstring example :

"""
  Retrieve content of a json file

  Args:
      path (str): The path of the file

  Returns:
      JSON object: The json object with the parameters
  """


fichier TP2_3\requirements.txt: 
gunicorn~=20.1
uvicorn==0.17.6
fastapi==0.95.1
fastapi-utils==0.2.1
pydantic==1.10
opendatasets
pytest


fichier TP2_3\config\dev: 


fichier TP2_3\config\local: 


fichier TP2_3\config\prd: 


fichier TP2_3\config\uat: 


fichier TP2_3\services\epf-flower-data-science\main.py: 
import uvicorn

from src.app import get_application

app = get_application()

if __name__ == "__main__":
    uvicorn.run("main:app", debug=True, reload=True, port=8080)


fichier TP2_3\services\epf-flower-data-science\iac\README.md: 
Folder to store terraform files or other files for infra as code tools


fichier TP2_3\services\epf-flower-data-science\src\app.py: 
# services/epf-flower-data-science/src/app.py

from fastapi import FastAPI
from starlette.responses import RedirectResponse
from starlette.middleware.cors import CORSMiddleware

from src.api.router import router

def get_application() -> FastAPI:
    """
    Function to create and configure the FastAPI application.
    Returns:
        FastAPI application instance.
    """
    application = FastAPI(
        title="EPF Flower Data Science API",
        description="API to serve flower species predictions based on the Iris dataset",
        version="1.0.0",
        redoc_url=None,  # Swagger UI will be used by default
    )

    # Add CORS middleware for handling cross-origin requests
    application.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # Allow all origins for development
        allow_credentials=True,
        allow_methods=["*"],  # Allow all methods
        allow_headers=["*"],
    )

    # Redirect the root endpoint to the Swagger UI documentation
    @application.get("/")
    async def root():
        return RedirectResponse(url="/docs")

    # Include the router for all API endpoints
    application.include_router(router)

    return application


fichier TP2_3\services\epf-flower-data-science\src\config\model_parameters.json: 
{
    "RandomForestClassifier": {
      "n_estimators": 100,
      "max_depth": 5,
      "random_state": 42
    }
}

fichier TP2_3\services\epf-flower-data-science\src\data\database.sqlite: 
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xe6 in position 98: invalid continuation byte

fichier TP2_3\services\epf-flower-data-science\src\data\Iris.csv: 
Id,SepalLengthCm,SepalWidthCm,PetalLengthCm,PetalWidthCm,Species
1,5.1,3.5,1.4,0.2,Iris-setosa
2,4.9,3.0,1.4,0.2,Iris-setosa
3,4.7,3.2,1.3,0.2,Iris-setosa
4,4.6,3.1,1.5,0.2,Iris-setosa
5,5.0,3.6,1.4,0.2,Iris-setosa
6,5.4,3.9,1.7,0.4,Iris-setosa
7,4.6,3.4,1.4,0.3,Iris-setosa
8,5.0,3.4,1.5,0.2,Iris-setosa
9,4.4,2.9,1.4,0.2,Iris-setosa
10,4.9,3.1,1.5,0.1,Iris-setosa
11,5.4,3.7,1.5,0.2,Iris-setosa
12,4.8,3.4,1.6,0.2,Iris-setosa
13,4.8,3.0,1.4,0.1,Iris-setosa
14,4.3,3.0,1.1,0.1,Iris-setosa
15,5.8,4.0,1.2,0.2,Iris-setosa
16,5.7,4.4,1.5,0.4,Iris-setosa
17,5.4,3.9,1.3,0.4,Iris-setosa
18,5.1,3.5,1.4,0.3,Iris-setosa
19,5.7,3.8,1.7,0.3,Iris-setosa
20,5.1,3.8,1.5,0.3,Iris-setosa
21,5.4,3.4,1.7,0.2,Iris-setosa
22,5.1,3.7,1.5,0.4,Iris-setosa
23,4.6,3.6,1.0,0.2,Iris-setosa
24,5.1,3.3,1.7,0.5,Iris-setosa
25,4.8,3.4,1.9,0.2,Iris-setosa
26,5.0,3.0,1.6,0.2,Iris-setosa
27,5.0,3.4,1.6,0.4,Iris-setosa
28,5.2,3.5,1.5,0.2,Iris-setosa
29,5.2,3.4,1.4,0.2,Iris-setosa
30,4.7,3.2,1.6,0.2,Iris-setosa
31,4.8,3.1,1.6,0.2,Iris-setosa
32,5.4,3.4,1.5,0.4,Iris-setosa
33,5.2,4.1,1.5,0.1,Iris-setosa
34,5.5,4.2,1.4,0.2,Iris-setosa
35,4.9,3.1,1.5,0.1,Iris-setosa
36,5.0,3.2,1.2,0.2,Iris-setosa
37,5.5,3.5,1.3,0.2,Iris-setosa
38,4.9,3.1,1.5,0.1,Iris-setosa
39,4.4,3.0,1.3,0.2,Iris-setosa
40,5.1,3.4,1.5,0.2,Iris-setosa
41,5.0,3.5,1.3,0.3,Iris-setosa
42,4.5,2.3,1.3,0.3,Iris-setosa
43,4.4,3.2,1.3,0.2,Iris-setosa
44,5.0,3.5,1.6,0.6,Iris-setosa
45,5.1,3.8,1.9,0.4,Iris-setosa
46,4.8,3.0,1.4,0.3,Iris-setosa
47,5.1,3.8,1.6,0.2,Iris-setosa
48,4.6,3.2,1.4,0.2,Iris-setosa
49,5.3,3.7,1.5,0.2,Iris-setosa
50,5.0,3.3,1.4,0.2,Iris-setosa
51,7.0,3.2,4.7,1.4,Iris-versicolor
52,6.4,3.2,4.5,1.5,Iris-versicolor
53,6.9,3.1,4.9,1.5,Iris-versicolor
54,5.5,2.3,4.0,1.3,Iris-versicolor
55,6.5,2.8,4.6,1.5,Iris-versicolor
56,5.7,2.8,4.5,1.3,Iris-versicolor
57,6.3,3.3,4.7,1.6,Iris-versicolor
58,4.9,2.4,3.3,1.0,Iris-versicolor
59,6.6,2.9,4.6,1.3,Iris-versicolor
60,5.2,2.7,3.9,1.4,Iris-versicolor
61,5.0,2.0,3.5,1.0,Iris-versicolor
62,5.9,3.0,4.2,1.5,Iris-versicolor
63,6.0,2.2,4.0,1.0,Iris-versicolor
64,6.1,2.9,4.7,1.4,Iris-versicolor
65,5.6,2.9,3.6,1.3,Iris-versicolor
66,6.7,3.1,4.4,1.4,Iris-versicolor
67,5.6,3.0,4.5,1.5,Iris-versicolor
68,5.8,2.7,4.1,1.0,Iris-versicolor
69,6.2,2.2,4.5,1.5,Iris-versicolor
70,5.6,2.5,3.9,1.1,Iris-versicolor
71,5.9,3.2,4.8,1.8,Iris-versicolor
72,6.1,2.8,4.0,1.3,Iris-versicolor
73,6.3,2.5,4.9,1.5,Iris-versicolor
74,6.1,2.8,4.7,1.2,Iris-versicolor
75,6.4,2.9,4.3,1.3,Iris-versicolor
76,6.6,3.0,4.4,1.4,Iris-versicolor
77,6.8,2.8,4.8,1.4,Iris-versicolor
78,6.7,3.0,5.0,1.7,Iris-versicolor
79,6.0,2.9,4.5,1.5,Iris-versicolor
80,5.7,2.6,3.5,1.0,Iris-versicolor
81,5.5,2.4,3.8,1.1,Iris-versicolor
82,5.5,2.4,3.7,1.0,Iris-versicolor
83,5.8,2.7,3.9,1.2,Iris-versicolor
84,6.0,2.7,5.1,1.6,Iris-versicolor
85,5.4,3.0,4.5,1.5,Iris-versicolor
86,6.0,3.4,4.5,1.6,Iris-versicolor
87,6.7,3.1,4.7,1.5,Iris-versicolor
88,6.3,2.3,4.4,1.3,Iris-versicolor
89,5.6,3.0,4.1,1.3,Iris-versicolor
90,5.5,2.5,4.0,1.3,Iris-versicolor
91,5.5,2.6,4.4,1.2,Iris-versicolor
92,6.1,3.0,4.6,1.4,Iris-versicolor
93,5.8,2.6,4.0,1.2,Iris-versicolor
94,5.0,2.3,3.3,1.0,Iris-versicolor
95,5.6,2.7,4.2,1.3,Iris-versicolor
96,5.7,3.0,4.2,1.2,Iris-versicolor
97,5.7,2.9,4.2,1.3,Iris-versicolor
98,6.2,2.9,4.3,1.3,Iris-versicolor
99,5.1,2.5,3.0,1.1,Iris-versicolor
100,5.7,2.8,4.1,1.3,Iris-versicolor
101,6.3,3.3,6.0,2.5,Iris-virginica
102,5.8,2.7,5.1,1.9,Iris-virginica
103,7.1,3.0,5.9,2.1,Iris-virginica
104,6.3,2.9,5.6,1.8,Iris-virginica
105,6.5,3.0,5.8,2.2,Iris-virginica
106,7.6,3.0,6.6,2.1,Iris-virginica
107,4.9,2.5,4.5,1.7,Iris-virginica
108,7.3,2.9,6.3,1.8,Iris-virginica
109,6.7,2.5,5.8,1.8,Iris-virginica
110,7.2,3.6,6.1,2.5,Iris-virginica
111,6.5,3.2,5.1,2.0,Iris-virginica
112,6.4,2.7,5.3,1.9,Iris-virginica
113,6.8,3.0,5.5,2.1,Iris-virginica
114,5.7,2.5,5.0,2.0,Iris-virginica
115,5.8,2.8,5.1,2.4,Iris-virginica
116,6.4,3.2,5.3,2.3,Iris-virginica
117,6.5,3.0,5.5,1.8,Iris-virginica
118,7.7,3.8,6.7,2.2,Iris-virginica
119,7.7,2.6,6.9,2.3,Iris-virginica
120,6.0,2.2,5.0,1.5,Iris-virginica
121,6.9,3.2,5.7,2.3,Iris-virginica
122,5.6,2.8,4.9,2.0,Iris-virginica
123,7.7,2.8,6.7,2.0,Iris-virginica
124,6.3,2.7,4.9,1.8,Iris-virginica
125,6.7,3.3,5.7,2.1,Iris-virginica
126,7.2,3.2,6.0,1.8,Iris-virginica
127,6.2,2.8,4.8,1.8,Iris-virginica
128,6.1,3.0,4.9,1.8,Iris-virginica
129,6.4,2.8,5.6,2.1,Iris-virginica
130,7.2,3.0,5.8,1.6,Iris-virginica
131,7.4,2.8,6.1,1.9,Iris-virginica
132,7.9,3.8,6.4,2.0,Iris-virginica
133,6.4,2.8,5.6,2.2,Iris-virginica
134,6.3,2.8,5.1,1.5,Iris-virginica
135,6.1,2.6,5.6,1.4,Iris-virginica
136,7.7,3.0,6.1,2.3,Iris-virginica
137,6.3,3.4,5.6,2.4,Iris-virginica
138,6.4,3.1,5.5,1.8,Iris-virginica
139,6.0,3.0,4.8,1.8,Iris-virginica
140,6.9,3.1,5.4,2.1,Iris-virginica
141,6.7,3.1,5.6,2.4,Iris-virginica
142,6.9,3.1,5.1,2.3,Iris-virginica
143,5.8,2.7,5.1,1.9,Iris-virginica
144,6.8,3.2,5.9,2.3,Iris-virginica
145,6.7,3.3,5.7,2.5,Iris-virginica
146,6.7,3.0,5.2,2.3,Iris-virginica
147,6.3,2.5,5.0,1.9,Iris-virginica
148,6.5,3.0,5.2,2.0,Iris-virginica
149,6.2,3.4,5.4,2.3,Iris-virginica
150,5.9,3.0,5.1,1.8,Iris-virginica


fichier TP2_3\services\epf-flower-data-science\src\schemas\camelcase.py: 
from fastapi_utils.camelcase import snake2camel
from pydantic import BaseConfig, BaseModel
from pydantic.generics import GenericModel


def snake_2_camel(m: str) -> str:
    return snake2camel(m, True)


class CamelCase(BaseModel):
    class Config(BaseConfig):
        allow_population_by_field_name = True
        alias_generator = snake_2_camel


class GenericCamelCase(GenericModel):
    class Config(BaseConfig):
        allow_population_by_field_name = True
        alias_generator = snake_2_camel


fichier TP2_3\services\epf-flower-data-science\src\schemas\message.py: 
from src.schemas.camelcase import CamelCase


class MessageResponse(CamelCase):
    message: str


fichier TP2_3\services\epf-flower-data-science\src\services\cleaning.py: 


fichier TP2_3\services\epf-flower-data-science\src\services\data.py: 


fichier TP2_3\services\epf-flower-data-science\src\services\parameters.py: 


fichier TP2_3\services\epf-flower-data-science\src\services\utils.py: 


